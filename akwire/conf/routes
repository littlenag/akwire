# Routes
# This file defines all application routes (Higher priority routes first)
#
# Note: @controllers syntax signifies the actual controller instance, retrieved via GlobalSettings.getController().
# ~~~~

POST    /ingest                     @controllers.Ingest.submitObservations
PUT     /ingest                     @controllers.Ingest.submitObservations

# Single endpoint for serving AngularJS
GET     /                           @controllers.Application.index
GET     /randomUUID                 @controllers.Application.randomUUID

# Detectors
POST    /detectors                  @controllers.Detectors.createDetector
GET     /detectors                  @controllers.Detectors.retrieveDetectors
GET     /detectors/:detectorId      @controllers.Detectors.retrieveDetector(detectorId:String)
POST    /detectors/:detectorId      @controllers.Detectors.updateDetector(detectorId:String)
DELETE  /detectors/:detectorId      @controllers.Detectors.deleteTeam(detectorId:String)

# Teams
POST    /teams                     @controllers.Teams.createTeam
GET     /teams                     @controllers.Teams.retrieveTeams
GET     /teams/:teamId             @controllers.Teams.retrieveTeam(teamId:String)
POST    /teams/:teamId             @controllers.Teams.updateTeam(teamId:String)
DELETE  /teams/:teamId             @controllers.Teams.deleteTeam(teamId:String)

# Roles
POST    /roles                     @controllers.Roles.createRole
GET     /roles                     @controllers.Roles.retrieveRoles
GET     /roles/:roleId             @controllers.Roles.retrieveRole(roleId:String)
POST    /roles/:roleId             @controllers.Roles.updateRole(roleId:String)
DELETE  /roles/:roleId             @controllers.Roles.deleteRole(roleId:String)

# Agent management API
GET     /agents                     @controllers.Agents.findAllAgents
GET     /agents/:agentId            @controllers.Agents.findOneAgent(agentId:String)
GET     /agents/:agentId/query      @controllers.Agents.queryAgent(agentId:String,command:String)
PUT     /agents                     @controllers.Agents.updateAgent

# Plugin management API
##GET     /plugins                    @controllers.Plugins.findPlugins

# Organizer management API
# - (app)    application class
# - (both)   system/service/application
# - (both)   group/team
# - (device) location
# - (device) network
# - (device) product class
#
# what can you then bind an agent template to?
#
# an organizer follows our tagging convention: organizer:/some/class
# by default when an organizer is created then all the agents/plugins/devices
#
# when you create an agent you need to decide whether or not it will have a profile attached
# if it does, then the root organizer must have its default profile specified at the time
# of creation. A NullProfile is recommended.
#
##GET     /organizers                  @controllers.Organizers.findOrganizers
##POST    /organizer                   @controllers.Organizers.createOrganizer
##PUT     /organizer                   @controllers.Organizers.updateOrganizer

# Once you've organized your hosts can then bind the organizer to a profile
# the profile specifies which plugins must be present and running, and
# what default configuration a plugin might have
#
# - (agent) profiles
##GET     /profiles                   @controllers.Profiles.findProfiles
##POST    /profile                    @controllers.Profiles.createProfile
##PUT     /profile                    @controllers.Profiles.updateProfile

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               controllers.Assets.at(path="/public", file)
