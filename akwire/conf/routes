# Routes
# This file defines all application routes (Higher priority routes first)
#
# Note: @controllers syntax signifies the actual controller instance, retrieved via GlobalSettings.getController().
# ~~~~

# By convention, POSTs are allowed to change state but are NOT idempotent, PUTs must be idempotent
# Otherwise, we are following the angular $resource convention

########################################################################

# SecureSocial entry point
->            /auth                             securesocial.Routes

########################################################################


# /ingest is the base resource for where other systems are supposed to send data
# ./observations is for raw numeric or textual observations of deployed systems
# ./alert is for integrating an alert from other external monitoring engines/scripts/etc
POST          /ingest/observations              @controllers.Ingest.submitObservations
#PUT     /ingest/observations      @controllers.Ingest.submitObservations

POST          /ingest/alert                     @controllers.Ingest.submitAlert
#PUT     /ingest/alert             @controllers.Ingest.submitAlert

# Single endpoint for serving AngularJS
GET           /                                 @controllers.Application.index
GET           /randomUUID                       @controllers.Application.randomUUID
GET           /login                            @controllers.Auth.login

# Detectors
POST          /detector/create                  @controllers.Detectors.createDetector
GET           /detector/list                    @controllers.Detectors.retrieveDetectors
GET           /detector                         @controllers.Detectors.retrieveDetector(detectorId:String)
POST          /detector                         @controllers.Detectors.updateDetector
DELETE        /detector                         @controllers.Detectors.deleteDetector
POST          /detector/create_token            @controllers.Detectors.genIntegrationToken(detectorId:String)

# Users
POST          /users                            @controllers.Users.createUser
GET           /users                            @controllers.Users.retrieveUsers
GET           /users/by-id/:userId              @controllers.Users.retrieveUserById(userId)
GET           /users/by-email/:email            @controllers.Users.retrieveUserByEmail(email)
DELETE        /users/:userId                    @controllers.Users.deleteUser(userId)

# Teams
POST          /teams                            @controllers.Teams.createTeam
GET           /teams                            @controllers.Teams.retrieveTeams
GET           /teams/:teamId                    @controllers.Teams.retrieveTeam(teamId:String)
DELETE        /teams/:teamId                    @controllers.Teams.deleteTeam(teamId:String)
POST          /teams/:teamId/rename             @controllers.Teams.renameTeam(teamId:String, oldName:String, newName:String)

# Rules (Users, Teams, etc)
GET           /rules/:owner                    @controllers.Rules.getRules(owner:models.OwningEntity)
POST          /rules/:owner                    @controllers.Rules.createRule(owner:models.OwningEntity)
PUT           /rules/:owner                    @controllers.Rules.updateRule(owner:models.OwningEntity)
DELETE        /rules/:owner                    @controllers.Rules.deleteRule(owner:models.OwningEntity,ruleId)
PUT           /rules/:owner/start              @controllers.Rules.startRule(owner:models.OwningEntity,ruleId)
PUT           /rules/:owner/pause              @controllers.Rules.pauseRule(owner:models.OwningEntity,ruleId)

# Roles
POST          /roles                            @controllers.Roles.createRole
GET           /roles                            @controllers.Roles.retrieveRoles
GET           /roles/:roleId                    @controllers.Roles.retrieveRole(roleId:String)
POST          /roles/:roleId                    @controllers.Roles.updateRole(roleId:String)
DELETE        /roles/:roleId                    @controllers.Roles.deleteRole(roleId:String)

# Agent management API
GET           /agents                           @controllers.Agents.findAllAgents
GET           /agents/:agentId                  @controllers.Agents.findOneAgent(agentId:String)
GET           /agents/:agentId/query            @controllers.Agents.queryAgent(agentId:String,command:String)
PUT           /agents                           @controllers.Agents.updateAgent

# Policies
POST          /policies/user                    @controllers.Policies.createUserPolicy
PUT           /policies/user                    @controllers.Policies.updateUserPolicy
GET           /policies/user                    @controllers.Policies.retrieveUserPolicies
GET           /policies/user/default            @controllers.Policies.retrieveDefaultUserPolicy
GET           /policies/user/:policyId          @controllers.Policies.retrievePolicyById(policyId)
DELETE        /policies/user/:policyId          @controllers.Policies.deletePolicy(policyId)

# Plugin management API
##GET     /plugins                    @controllers.Plugins.findPlugins

# Organizer management API
# - (app)    application class
# - (both)   system/service/application
# - (both)   group/team
# - (device) location
# - (device) network
# - (device) product class
#
# what can you then bind an agent template to?
#
# an organizer follows our tagging convention: organizer:/some/class
# by default when an organizer is created then all the agents/plugins/devices
#
# when you create an agent you need to decide whether or not it will have a profile attached
# if it does, then the root organizer must have its default profile specified at the time
# of creation. A NullProfile is recommended.
#
##GET     /organizers                  @controllers.Organizers.findOrganizers
##POST    /organizer                   @controllers.Organizers.createOrganizer
##PUT     /organizer                   @controllers.Organizers.updateOrganizer

# Once you've organized your hosts can then bind the organizer to a profile
# the profile specifies which plugins must be present and running, and
# what default configuration a plugin might have
#
# - (agent) profiles
##GET     /profiles                   @controllers.Profiles.findProfiles
##POST    /profile                    @controllers.Profiles.createProfile
##PUT     /profile                    @controllers.Profiles.updateProfile

# Map static resources from the /public folder to the /assets URL path
GET           /assets/*file                     controllers.Assets.at(path="/public", file)
