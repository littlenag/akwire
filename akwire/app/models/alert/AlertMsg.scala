package models.alert

import models.{PersistedRuleConfiguration, ContextualizedStream, Contextualized}
import models.core.Observation
import org.joda.time.DateTime

/**
 * These are all messages generated by the AlertEngine to drive the
 * Incident life-cycle. Incidents are created following a DoTrigger
 * and closed once
 */
sealed abstract class AlertMsg(val rule:PersistedRuleConfiguration,
                               val observations:List[Observation],
                               val created:DateTime) extends Contextualized {

  def contextualizedStream: ContextualizedStream = {
    // Only need to inspect the first Observation since the contextualized stream
    // is defined as being the same across all in the provided list
    val obs = observations(0)

    var l = List[(String, String)]()

    rule.context.foreach {
      case "instance" => l = l :+ ("instance", obs.instance)
      case "host"     => l = l :+ ("host", obs.host)
      case "observer" => l = l :+ ("observer", obs.observer)
      case "key"      => l = l :+ ("key", obs.key)
    }

    ContextualizedStream(l)
  }
}

/**
 * Sent if a new Incident is detected to Trigger a new Incident
 * @param rule
 * @param observations
 * @param created
 */
case class DoTrigger(override val rule:PersistedRuleConfiguration,
                     override val observations:List[Observation],
                     override val created:DateTime = new DateTime()) extends AlertMsg(rule, observations, created)

/**
 * Sent if new Observations are received that continue to breach the threshold
 * set by a rule. May not be used.
 * @param rule
 * @param observations
 * @param created
 */
case class DoProlong(override val rule:PersistedRuleConfiguration,
                     override val observations:List[Observation],
                     override val created:DateTime = new DateTime()) extends AlertMsg(rule, observations, created)

/**
 * Sent if new Observations are received that satisfy the clear condition set by
 * a rule. Not all rules have a clear condition.
 * @param rule
 * @param observations
 * @param created
 */
case class DoResolve(override val rule:PersistedRuleConfiguration,
                     override val observations:List[Observation],
                     override val created:DateTime = new DateTime()) extends AlertMsg(rule, observations, created)

/**
 * Sent if a Rule is altered during a period of time it has a triggered alert.
 *
 * When a rule is edited while there a trigged alert for the rule, we have two options:
 *  - we can either leave the Resolve rules loaded in the AlertEngine to trigger
 *  - unload all the Resolve rules and send a DoInter message saying that while the
 *    Incident remains active, it is no longer possible that the Incident will auto-resolve
 *
 * @param rule
 * @param observations
 * @param created
 */
case class DoInter(override val rule:PersistedRuleConfiguration,
                   override val observations:List[Observation],
                   override val created:DateTime = new DateTime()) extends AlertMsg(rule, observations, created)
